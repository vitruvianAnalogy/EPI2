1. A final score of 9 can be achieved by using 2,7 in two ways
	1. 2 followed by 7
	2. 7 followed by 2
	3. We only consider only one of these sequences.
	4. We can generate both of these sequences and then sort them, and then store them in hashtable making it distinct.

2. Time complexity of this is high, since we are considering all the sequences and then thinning them. A better approach would be to focus on "combinations" from the start.

3. 12 score made of 2,3
	- 4 plays of 3
	- 6 plays of 2
	- Since order doesn't matter (assuming 2 comes before 3)
		- 1 play of 2 means we have (12-2) i.e. 10/3 - not possible
		- 2 play of 2 means we have (12-4) i.e. 8/3 - not possible
		- 3 play of 2 means we have (12-6) i.e. 6/3 = 2, hence (3 plays of 2 and 2 plays of 3)
		- 4 play of 2 means we have (12-8) i.e. 4/3 - not possible
		- 5 play of 2 means we have (12-10) i.e. 2/3 - not possible

	- Hence the correct plays are
		- 4 plays of 3
		- 6 plays of 2
		- 3 plays of 2 and 2 plays of 3
	- This has exponential complexity because it repeatedly solves the same problem
	- We can use DP to solve this problem


4. Step 4 : Generalize
	- An array of integers that represent the type of plays, e.g. playf of score 1, 2, 3 makes this array
	- An array A[i][j] stores score combinations - that store the total of j, e.g. A[1][12] = total score of 12
	- A[1][12] - make up score of 12 using W[1] i.e. 2
	- A[2][12] - make up score of 12 using W[2]


	- A[i+1][j] = A[i][j] + A[i][j-W[i+1]]